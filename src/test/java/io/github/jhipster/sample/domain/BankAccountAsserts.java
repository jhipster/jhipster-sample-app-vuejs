package io.github.jhipster.sample.domain;

import static io.github.jhipster.sample.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BankAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountAllPropertiesEquals(BankAccount expected, BankAccount actual) {
        assertBankAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertBankAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountAllUpdatablePropertiesEquals(BankAccount expected, BankAccount actual) {
        assertBankAccountUpdatableFieldsEquals(expected, actual);
        assertBankAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountAutoGeneratedPropertiesEquals(BankAccount expected, BankAccount actual) {
        assertThat(expected)
            .as("Verify BankAccount auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountUpdatableFieldsEquals(BankAccount expected, BankAccount actual) {
        assertThat(expected)
            .as("Verify BankAccount relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getBankNumber()).as("check bankNumber").isEqualTo(actual.getBankNumber()))
            .satisfies(e -> assertThat(e.getAgencyNumber()).as("check agencyNumber").isEqualTo(actual.getAgencyNumber()))
            .satisfies(e ->
                assertThat(e.getLastOperationDuration()).as("check lastOperationDuration").isEqualTo(actual.getLastOperationDuration())
            )
            .satisfies(e ->
                assertThat(e.getMeanOperationDuration()).as("check meanOperationDuration").isEqualTo(actual.getMeanOperationDuration())
            )
            .satisfies(e ->
                assertThat(e.getBalance()).as("check balance").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBalance())
            )
            .satisfies(e -> assertThat(e.getOpeningDay()).as("check openingDay").isEqualTo(actual.getOpeningDay()))
            .satisfies(e -> assertThat(e.getLastOperationDate()).as("check lastOperationDate").isEqualTo(actual.getLastOperationDate()))
            .satisfies(e -> assertThat(e.getActive()).as("check active").isEqualTo(actual.getActive()))
            .satisfies(e -> assertThat(e.getAccountType()).as("check accountType").isEqualTo(actual.getAccountType()))
            .satisfies(e -> assertThat(e.getAttachment()).as("check attachment").isEqualTo(actual.getAttachment()))
            .satisfies(e ->
                assertThat(e.getAttachmentContentType()).as("check attachment contenty type").isEqualTo(actual.getAttachmentContentType())
            )
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountUpdatableRelationshipsEquals(BankAccount expected, BankAccount actual) {
        // empty method
    }
}
