package io.github.jhipster.sample.domain;

import static io.github.jhipster.sample.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BankAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountAllPropertiesEquals(BankAccount expected, BankAccount actual) {
        assertBankAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertBankAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountAllUpdatablePropertiesEquals(BankAccount expected, BankAccount actual) {
        assertBankAccountUpdatableFieldsEquals(expected, actual);
        assertBankAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountAutoGeneratedPropertiesEquals(BankAccount expected, BankAccount actual) {
        assertThat(actual)
            .as("Verify BankAccount auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountUpdatableFieldsEquals(BankAccount expected, BankAccount actual) {
        assertThat(actual)
            .as("Verify BankAccount relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getBankNumber()).as("check bankNumber").isEqualTo(expected.getBankNumber()))
            .satisfies(a -> assertThat(a.getAgencyNumber()).as("check agencyNumber").isEqualTo(expected.getAgencyNumber()))
            .satisfies(a ->
                assertThat(a.getLastOperationDuration()).as("check lastOperationDuration").isEqualTo(expected.getLastOperationDuration())
            )
            .satisfies(a ->
                assertThat(a.getMeanOperationDuration()).as("check meanOperationDuration").isEqualTo(expected.getMeanOperationDuration())
            )
            .satisfies(a ->
                assertThat(a.getBalance()).as("check balance").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBalance())
            )
            .satisfies(a -> assertThat(a.getOpeningDay()).as("check openingDay").isEqualTo(expected.getOpeningDay()))
            .satisfies(a -> assertThat(a.getLastOperationDate()).as("check lastOperationDate").isEqualTo(expected.getLastOperationDate()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()))
            .satisfies(a -> assertThat(a.getAccountType()).as("check accountType").isEqualTo(expected.getAccountType()))
            .satisfies(a -> assertThat(a.getAttachment()).as("check attachment").isEqualTo(expected.getAttachment()))
            .satisfies(a ->
                assertThat(a.getAttachmentContentType()).as("check attachment contenty type").isEqualTo(expected.getAttachmentContentType())
            )
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountUpdatableRelationshipsEquals(BankAccount expected, BankAccount actual) {
        // empty method
    }
}
